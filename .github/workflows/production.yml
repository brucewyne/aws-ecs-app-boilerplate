name: Deploy to Production

on:
  push:
    branches:
      - main
concurrency:
  group: app-production

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: app-repository

jobs:
  build:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker Build and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:build-${{ github.run_number }}

  deploy:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.11

      - name: Create or Update ECS Service
        uses: dflook/terraform-apply@v1
        with:
          path: terraform/production
          auto_approve: true
          variables: |
            docker_image="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:build-${{ github.run_number }}"

  finalize:
    name: Finalize
    runs-on: ubuntu-latest
    if: always() && !cancelled()
    needs:
      - deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Tag Release with Build Number
        id: tag_version
        uses: rickstaa/action-create-tag@v1
        with:
          tag: 'build-${{ github.run_number }}'

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Build ${{github.run_number}}
          body: ${{ steps.tag_version.outputs.changelog }}
